{
	"name": "polycurve",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"curve": {
			"points": [
				{
					"x": 0.826151967048645,
					"y": 0.787355065345764
				},
				{
					"x": 0.639999985694885,
					"y": 0.917500019073486
				},
				{
					"x": 0.407499998807907,
					"y": 0.9375
				},
				{
					"x": 0.19081699848175,
					"y": 0.869726002216339
				},
				{
					"x": 0.107500001788139,
					"y": 0.732500016689301
				},
				{
					"x": 0.217896997928619,
					"y": 0.63400399684906
				},
				{
					"x": 0.455000013113022,
					"y": 0.722500026226044
				},
				{
					"x": 0.72035801410675,
					"y": 0.69351202249527
				},
				{
					"x": 0.837499976158142,
					"y": 0.535000026226044
				},
				{
					"x": 0.661969006061554,
					"y": 0.406711995601654
				},
				{
					"x": 0.407499998807907,
					"y": 0.497500002384186
				},
				{
					"x": 0.181207999587059,
					"y": 0.355704009532928
				},
				{
					"x": 0.230000004172325,
					"y": 0.144999995827675
				},
				{
					"x": 0.494720995426178,
					"y": 0.130715996026993
				}
			],
			"type": "Polygon"
		},
		"ends": true,
		"repeat": 10,
		"width": 0.1
	},
	"seed_int": 0,
	"shader_model": {
		"code": "",
		"global": [
			"vec2 curve(float t, vec2 a, vec2 b, vec2 c, vec2 d) {",
			"\tvec2 e = c-b;",
			"\tvec2 f = a-d;",
			"\tvec2 g = a-b;",
			"\treturn (b+0.5*t*(e-g+t*(g+e+t*3.0*(e*3.0+f+t*5.0/3.0*(-e*3.0-f+t*0.4*(e*3.0+f))))));",
			"}",
			"",
			"vec2 dcurve(float t, vec2 a, vec2 b, vec2 c, vec2 d) {",
			"\tvec2 e = c-b;",
			"\tvec2 f = a-d;",
			"\tvec2 g = a-b;",
			"\treturn 0.5*((((f+3.0*e)*((10.0*t-20.0)*t+9.0))*t+2.0*(g+e))*t+e-g);",
			"}",
			"vec2 solve_cubic(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {",
			"\tfloat t = 0.5;",
			"\tvec2 pos, dv;",
			"\tfloat current_sign = 0.0;",
			"\tfloat dt = 0.25;",
			"\tfor (int i = 0; i < 20; ++i) {",
			"\t\tpos = curve(t, a, b, c, d);",
			"\t\tdv = dcurve(t, a, b, c, d);",
			"\t\tfloat new_sign = sign(dot(normalize(uv - pos), dv));",
			"\t\tif (new_sign != current_sign) {",
			"\t\t\tcurrent_sign = new_sign;",
			"\t\t\tdt *= 0.5;",
			"\t\t}",
			"\t\tt += dt*current_sign;",
			"\t}",
			"\tt = clamp(t, 0.0, 1.0);",
			"\treturn vec2(t, length(uv-curve(t, a, b, c, d)));",
			"}",
			""
		],
		"inputs": [
			{
				"default": "vec4(vec3(step(abs($uv.y-0.5), 0.4999)), 1.0)",
				"label": "",
				"longdesc": "Input pattern to be drawn along the curve",
				"name": "in",
				"shortdesc": "Pattern",
				"type": "rgba"
			},
			{
				"default": "1.0",
				"function": true,
				"label": "",
				"longdesc": "A map that describes the width along the curve (use a Tonality node)",
				"name": "width_map",
				"shortdesc": "Width map",
				"type": "f"
			}
		],
		"instance": [
			"vec2 bezier_uv_$name(vec2 uv, bool ends) {\t",
			"\tvec2 v[] = $curve;",
			"\tint l = v.length();",
			"\tvec2 best_bezier;",
			"\tif (ends) {",
			"\t\tbest_bezier = solve_cubic(uv, v[0], v[0], v[1], v[2]);",
			"\t} else {",
			"\t\tbest_bezier = vec2(0.0, 10000.0);",
			"\t}",
			"\tfloat offset = 0.0;",
			"\tfor (int i = 0; i < l-3; i++) {",
			"\t\tvec2 bezier = solve_cubic(uv, v[i], v[i+1], v[i+2], v[i+3]);",
			"\t\tif (abs(bezier.y) < abs(best_bezier).y) {",
			"\t\t\tbest_bezier = bezier;",
			"\t\t\toffset = float(i)+1.0;",
			"\t\t}",
			"\t}",
			"\tfloat width;",
			"\tfloat offset_min;",
			"\tfloat offset_max;",
			"\tif (ends) {",
			"\t\tvec2 bezier = solve_cubic(uv, v[l-3], v[l-2], v[l-1], v[l-1]);",
			"\t\tif (abs(bezier.y) < abs(best_bezier).y) {",
			"\t\t\tbest_bezier = bezier;",
			"\t\t\toffset = float(l-2);",
			"\t\t}",
			"\t\twidth = $width*$width_map(vec2((best_bezier.x+offset)/float(l-1), 0.0));",
			"\t\toffset_min = 0.0;",
			"\t\toffset_max = float(l-2);",
			"\t} else {",
			"\t\twidth = $width*$width_map(vec2((best_bezier.x+offset-1.0)/float(l-3), 0.0));",
			"\t\toffset_min = 1.0;",
			"\t\toffset_max = float(l-3);",
			"\t}",
			"\tvec2 local_uv = vec2(best_bezier.x, best_bezier.y/width+0.5);",
			"\tvec2 uvtest = vec2(0.0);",
			"\tif (offset <= offset_min && local_uv.x <= 0.0 || offset >= offset_max && local_uv.x >= 1.0) {",
			"\t\tuvtest = step(vec2(0.5), abs(local_uv-vec2(0.5)));",
			"\t}",
			"\treturn mix(vec2(fract($repeat*local_uv.x), local_uv.y), vec2(0.0), max(uvtest.x, uvtest.y));",
			"}",
			""
		],
		"name": "Poly Curve",
		"outputs": [
			{
				"longdesc": "An image showing the specified curve",
				"rgba": "$in(bezier_uv_$name($uv, $ends))",
				"shortdesc": "Output",
				"type": "rgba"
			}
		],
		"parameters": [
			{
				"default": {
					"points": [
						{
							"x": 0.200000002980232,
							"y": 0.200000002980232
						},
						{
							"x": 0.699999988079071,
							"y": 0.400000005960464
						},
						{
							"x": 0.400000005960464,
							"y": 0.699999988079071
						}
					],
					"type": "Polygon"
				},
				"label": "",
				"name": "curve",
				"type": "polyline"
			},
			{
				"control": "None",
				"default": 0.1,
				"label": "Width",
				"longdesc": "Width of the curve pattern",
				"max": 0.5,
				"min": 0,
				"name": "width",
				"shortdesc": "Width",
				"step": 0.01,
				"type": "float"
			},
			{
				"control": "None",
				"default": 1,
				"label": "Repeat",
				"longdesc": "Number of repetitions of the input pattern",
				"max": 16,
				"min": 1,
				"name": "repeat",
				"shortdesc": "Repeat",
				"step": 1,
				"type": "float"
			},
			{
				"default": false,
				"label": "Ends",
				"longdesc": "If unset, end vertices of the curve are used only for orientation",
				"name": "ends",
				"shortdesc": "Ends",
				"type": "boolean"
			}
		],
		"shortdesc": "Poly Curve",
		"longdesc": "Multi-point curve with image mapping"
	},
	"type": "shader"
}