[gd_scene load_steps=9 format=3 uid="uid://cxcw0mi4sfl2x"]

[ext_resource type="ArrayMesh" uid="uid://kvgtp30latgq" path="res://material_maker/meshes/suzanne.obj" id="1"]
[ext_resource type="Script" uid="uid://dumc33fnias7j" path="res://material_maker/panels/preview_3d/preview_mesh_generated.gd" id="1_2ljk2"]
[ext_resource type="Script" uid="uid://m5lpqku28wub" path="res://material_maker/panels/preview_3d/preview_mesh.gd" id="3"]

[sub_resource type="ArrayMesh" id="ArrayMesh_mgw7t"]
resource_local_to_scene = true

[sub_resource type="ArrayMesh" id="ArrayMesh_obs4a"]
resource_local_to_scene = true

[sub_resource type="SphereMesh" id="3"]
radius = 0.75
height = 1.5
radial_segments = 32
rings = 16

[sub_resource type="ArrayMesh" id="ArrayMesh_tqjv1"]
resource_local_to_scene = true

[sub_resource type="PrismMesh" id="4"]

[node name="Objects" type="Node3D"]

[node name="Cube" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("ArrayMesh_mgw7t")
script = ExtResource("1_2ljk2")
compute_shader = "#version 450
// VERTEX COUNT: 6*(size+1)*(size+1)
// INDEX COUNT: 12*size*(size+2)-2

layout(local_size_x = @LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

@DECLARATIONS

layout(set = 3, binding = 0, std140) restrict buffer MM {
	int mm_chunk_y;
};

void set_face_point(int vertex_index, vec3 vertex, vec3 normal, vec3 tangent, vec2 tex_uvs, mat3 mat) {
	vertex = mat*vertex;
	mm_out.vertices[3*vertex_index+0] = vertex.x;
	mm_out.vertices[3*vertex_index+1] = vertex.y;
	mm_out.vertices[3*vertex_index+2] = vertex.z;
	normal = mat*normal;
	mm_out.normals[3*vertex_index+0] = normal.x;
	mm_out.normals[3*vertex_index+1] = normal.y;
	mm_out.normals[3*vertex_index+2] = normal.z;
	tangent = mat*tangent;
	mm_out.tangents[4*vertex_index+0] = tangent.x;
	mm_out.tangents[4*vertex_index+1] = tangent.y;
	mm_out.tangents[4*vertex_index+2] = tangent.z;
	mm_out.tangents[4*vertex_index+3] = 1.0;
	mm_out.tex_uvs[2*vertex_index+0] = tex_uvs.x;
	mm_out.tex_uvs[2*vertex_index+1] = tex_uvs.y;
}

void set_point(int x, int y) {
	int vertex_index = x+(size+1)*y;
	int vertex_offset = (size+1)*(size+1);
	float scale = 1.0/float(size);
	vec2 p = vec2(scale*x-0.5, scale*y-0.5);
	vec3 vertex;
	vec3 tangent;
	vec3 normal;
	vec2 tex_uvs;
	vec2 angle;
	vec2 base = p;
	int round = 0;
	float radius = chamfer*0.70710678118;
	if (2.0*scale*x < chamfer) {
		base.x = -0.5+0.5*chamfer;
		round += 1;
	} else if (2.0*scale*x > 2.0-chamfer) {
		base.x = 0.5-0.5*chamfer;
		round += 1;
	}
	if (2.0*scale*y < chamfer) {
		base.y = -0.5+0.5*chamfer;
		round += 1;
	} else if (2.0*scale*y > 2.0-chamfer) {
		base.y = 0.5-0.5*chamfer;
		round += 1;
	}
	if (p == base) {
		angle = vec2(0.0);
	} else {
		angle = p-base;
		angle *= 0.78539816339;
		angle /= 0.5*chamfer;
		if (round > 1) {
			float max_angle = max(abs(angle.x), abs(angle.y));
			float min_angle = min(abs(angle.x), abs(angle.y));
			float d2c = min_angle/max_angle;
			angle = (1.0+0.12*d2c*d2c)*max_angle*normalize(angle/max_angle);
		}
	}
	vec2 sin_angle = sin(angle);
	normal = vec3(sin_angle.x, sqrt(1.0-dot(sin_angle, sin_angle)), sin_angle.y);
	vertex = vec3(base.x, 0.5-0.709*radius, base.y)+radius*normal;
	tangent = normalize(vec3(1.0, 0.0, 0.0));
	tex_uvs = scale*vec2(x, y)/vec2(3.0, 2.0);
	mat3 mat;
	vec2 uv_offset;
	mat = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);
	uv_offset = vec2(0.0, 0.0);
	set_face_point(vertex_index, vertex, normal, tangent, tex_uvs+uv_offset, mat);
	mat = mat3(-1, 0, 0, 0, 0, -1, 0, -1, 0);
	uv_offset = vec2(1.0, 0.0)/vec2(3.0, 2.0);
	set_face_point(vertex_index+vertex_offset, vertex, normal, tangent, tex_uvs+uv_offset, mat);
	mat = mat3(1, 0, 0, 0, 0, 1, 0, -1, 0);
	uv_offset = vec2(2.0, 0.0)/vec2(3.0, 2.0);
	set_face_point(vertex_index+2*vertex_offset, vertex, normal, tangent, tex_uvs+uv_offset, mat);
	mat = mat3(0, 0, -1, 1, 0, 0, 0, -1, 0);
	uv_offset = vec2(0.0, 1.0)/vec2(3.0, 2.0);
	set_face_point(vertex_index+3*vertex_offset, vertex, normal, tangent, tex_uvs+uv_offset, mat);
	mat = mat3(0, 0, 1, -1, 0, 0, 0, -1, 0);
	uv_offset = vec2(1.0, 1.0)/vec2(3.0, 2.0);
	set_face_point(vertex_index+4*vertex_offset, vertex, normal, tangent, tex_uvs+uv_offset, mat);
	mat = mat3(1, 0, 0, 0, -1, 0, 0, 0, -1);
	uv_offset = vec2(2.0, 1.0)/vec2(3.0, 2.0);
	set_face_point(vertex_index+5*vertex_offset, vertex, normal, tangent, tex_uvs+uv_offset, mat);
}

void main() {
	ivec2 c = ivec2(gl_GlobalInvocationID.xy)+ivec2(0, mm_chunk_y);
	set_point(c.x, c.y);
	if (c.x == size-1) {
		set_point(size, c.y);
		if (c.y == size-1) {
			set_point(size, size);
		}
	}
	if (c.y == size-1) {
		set_point(c.x, size);
	}
	int index_offset = 0;
	int vertex_offset = 0;
	for (int i = 0; i < 6; ++i) {
		mm_out.indexes[index_offset+2*(c.x+(size+2)*c.y)] = vertex_offset+c.x+(size+1)*(c.y+1);
		mm_out.indexes[index_offset+2*(c.x+(size+2)*c.y)+1] = vertex_offset+c.x+(size+1)*c.y;
		if (c.x == size-1) {
			mm_out.indexes[index_offset+2*(size+(size+2)*c.y)] = vertex_offset+size+(size+1)*(c.y+1);
			mm_out.indexes[index_offset+2*(size+(size+2)*c.y)+1] = vertex_offset+size+(size+1)*c.y;
			if (c.y != size-1) {
				mm_out.indexes[index_offset+2*(size+(size+2)*c.y)+2] = vertex_offset+size+(size+1)*c.y;
				mm_out.indexes[index_offset+2*(size+(size+2)*c.y)+3] = vertex_offset+(size+1)*(c.y+2);
			} else if (i < 5) {
				mm_out.indexes[index_offset+2*(size+(size+2)*c.y)+2] = vertex_offset+size+(size+1)*c.y;
				mm_out.indexes[index_offset+2*(size+(size+2)*c.y)+3] = vertex_offset+(size+1)*(size+2);
			}
		}
		index_offset += 2*(size+2)*size;
		vertex_offset += (size+1)*(size+1);
	}
}
"
vertex_count_expression = "6*(size+1)*(size+1)"
index_count_expression = "12*size*(size+2)-2"
can_tesselate = false
uv_scale = Vector2(3, 2)
parameters = [{
"default_value": 0.2,
"label": "Chamfer",
"max_value": "1",
"min_value": "0",
"name": "chamfer",
"save_in_config": true
}]

[node name="Cylinder" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("ArrayMesh_obs4a")
script = ExtResource("1_2ljk2")
compute_shader = "#version 450
// VERTEX COUNT: (size+1)*(size+1)
// INDEX COUNT: 2*size*(size+2)-2

layout(local_size_x = @LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

@DECLARATIONS

layout(set = 3, binding = 0, std140) restrict buffer MM {
	int mm_chunk_y;
};

const float TAU = 6.28318530718;

void set_face_point(int vertex_index, vec3 vertex, vec3 normal, vec3 tangent, vec2 tex_uvs) {
	mm_out.vertices[3*vertex_index+0] = vertex.x;
	mm_out.vertices[3*vertex_index+1] = vertex.y;
	mm_out.vertices[3*vertex_index+2] = vertex.z;
	mm_out.normals[3*vertex_index+0] = normal.x;
	mm_out.normals[3*vertex_index+1] = normal.y;
	mm_out.normals[3*vertex_index+2] = normal.z;
	mm_out.tangents[4*vertex_index+0] = tangent.x;
	mm_out.tangents[4*vertex_index+1] = tangent.y;
	mm_out.tangents[4*vertex_index+2] = tangent.z;
	mm_out.tangents[4*vertex_index+3] = 1.0;
	mm_out.tex_uvs[2*vertex_index+0] = tex_uvs.x;
	mm_out.tex_uvs[2*vertex_index+1] = tex_uvs.y;
}

void set_point(int x, int y) {
	int vertex_index = x+(size+1)*y;
	int vertex_offset = (size+1)*(size+1);
	float scale = 1.0/float(size);
	vec2 vertex_2d = vec2(0.5, scale*y-0.5);
	vec2 normal_2d = vec2(1.0, 0.0);
	if (abs(vertex_2d.y) > 0.5*(1.0-chamfer)) {
		float s = sign(vertex_2d.y);
		float r = 2.0*chamfer/TAU;
		float a = 0.5*TAU*(0.5-abs(vertex_2d.y))/chamfer;
		normal_2d = vec2(sin(a), s*cos(a));
		vertex_2d = vec2(vertex_2d.x-r, s*0.5*(1.0-chamfer))+r*normal_2d;
	}
	float a = float(x)*TAU/float(size);	
	vec3 vertex = vec3(vertex_2d.x*cos(a), vertex_2d.y, vertex_2d.x*sin(a));
	vec3 normal = normalize(vec3(normal_2d.x*cos(a), normal_2d.y, normal_2d.x*sin(a)));
	vec3 tangent = vec3(sin(a), 0, -cos(a));
	vec2 tex_uvs =vec2(1.0, 1.0)-scale*vec2(x, y);
	set_face_point(vertex_index, vertex, normal, tangent, tex_uvs);
}

void main() {
	ivec2 c = ivec2(gl_GlobalInvocationID.xy)+ivec2(0, mm_chunk_y);
	set_point(c.x, c.y);
	mm_out.indexes[2*(c.x+(size+2)*c.y)] = c.x+(size+1)*(c.y+1);
	mm_out.indexes[2*(c.x+(size+2)*c.y)+1] = c.x+(size+1)*c.y;
	if (c.x == size-1) {
		mm_out.indexes[2*(size+(size+2)*c.y)] = size+(size+1)*(c.y+1);
		mm_out.indexes[2*(size+(size+2)*c.y)+1] = size+(size+1)*c.y;
		set_point(size, c.y);
		if (c.y == size-1) {
			set_point(size, size);
		} else {
			mm_out.indexes[2*(size+(size+2)*c.y)+2] = size+(size+1)*c.y;
			mm_out.indexes[2*(size+(size+2)*c.y)+3] = (size+1)*(c.y+2);
		}
	}
	if (c.y == size-1) {
		set_point(c.x, size);
	}
}
"
vertex_count_expression = "(size+1)*(size+1)"
index_count_expression = "2*size*(size+2)-2"
can_tesselate = false
uv_scale = Vector2(3, 1)
parameters = [{
"default_value": 0.2,
"label": "Chamfer",
"max_value": "1",
"min_value": "0",
"name": "chamfer",
"save_in_config": true
}]

[node name="Sphere" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("3")
script = ExtResource("3")
uv_scale = Vector2(4, 2)

[node name="Plane" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("ArrayMesh_tqjv1")
script = ExtResource("1_2ljk2")
compute_shader = "#version 450

layout(local_size_x = @LOCAL_SIZE, local_size_y = 1, local_size_z = 1) in;

@DECLARATIONS

layout(set = 3, binding = 0, std140) restrict buffer MM {
	int mm_chunk_y;
};

void set_point(int x, int y) {
	int vertex_index = x+(size+1)*y;
	float scale = 1.0/float(size);
	mm_out.vertices[3*vertex_index+0] = 2.0*scale*x-1.0;
	mm_out.vertices[3*vertex_index+1] = curvature*cos(scale*x-0.5)*cos(scale*y-0.5)-curvature;
	mm_out.vertices[3*vertex_index+2] = 2.0*scale*y-1.0;
	vec3 tangent = normalize(vec3(2.0, -curvature*scale*sin(scale*x-0.5)*cos(scale*y-0.5), 0.0));
	vec3 cotangent = normalize(vec3(0.0, -curvature*scale*cos(scale*x-0.5)*sin(scale*y-0.5), 2.0));
	vec3 normal = normalize(cross(cotangent, tangent));
	mm_out.normals[3*vertex_index+0] = normal.x;
	mm_out.normals[3*vertex_index+1] = normal.y;
	mm_out.normals[3*vertex_index+2] = normal.z;
	mm_out.tangents[4*vertex_index+0] = tangent.x;
	mm_out.tangents[4*vertex_index+1] = tangent.y;
	mm_out.tangents[4*vertex_index+2] = tangent.z;
	mm_out.tangents[4*vertex_index+3] = 1.0;
	mm_out.tex_uvs[2*vertex_index+0] = scale*x;
	mm_out.tex_uvs[2*vertex_index+1] = scale*y;
}

void main() {
	ivec2 c = ivec2(gl_GlobalInvocationID.xy)+ivec2(0, mm_chunk_y);
	set_point(c.x, c.y);
	mm_out.indexes[2*(c.x+(size+2)*c.y)] = c.x+(size+1)*(c.y+1);
	mm_out.indexes[2*(c.x+(size+2)*c.y)+1] = c.x+(size+1)*c.y;
	if (c.x == size-1) {
		mm_out.indexes[2*(size+(size+2)*c.y)] = size+(size+1)*(c.y+1);
		mm_out.indexes[2*(size+(size+2)*c.y)+1] = size+(size+1)*c.y;
		set_point(size, c.y);
		if (c.y == size-1) {
			set_point(size, size);
		} else {
			mm_out.indexes[2*(size+(size+2)*c.y)+2] = size+(size+1)*c.y;
			mm_out.indexes[2*(size+(size+2)*c.y)+3] = (size+1)*(c.y+2);
		}
	}
	if (c.y == size-1) {
		set_point(c.x, size);
	}
}
"
vertex_count_expression = "(size+1)*(size+1)"
index_count_expression = "2*size*(size+2)-2"
can_tesselate = false
uv_scale = Vector2(2, 2)
parameters = [{
"default_value": 0.5,
"label": "Curvature",
"max_value": "5",
"min_value": "0",
"name": "curvature",
"save_in_config": true
}]

[node name="Prism" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("4")
script = ExtResource("3")
uv_scale = Vector2(3, 2)

[node name="Custom" type="MeshInstance3D" parent="."]
visible = false
mesh = ExtResource("1")
script = ExtResource("3")
can_tesselate = false
